namespace Binance.Api.Spot;

/// <summary>
/// Binance Spot Order
/// </summary>
public record BinanceSpotOrder
{
    /// <summary>
    /// The symbol the order is for
    /// </summary>
    public string Symbol { get; set; } = "";

    /// <summary>
    /// The order id generated by Binance
    /// </summary>
    [JsonProperty("orderId")]
    public long Id { get; set; }

    /// <summary>
    /// Id of the order list this order belongs to
    /// </summary>
    public long OrderListId { get; set; }

    /// <summary>
    /// The order id as assigned by the client
    /// </summary>
    public string ClientOrderId { get; set; } = "";

    /// <summary>
    /// The order id as assigned by the client without the prefix
    /// </summary>
    public string RequestClientOrderId => ClientOrderId
        .TrimStart(BinanceConstants.ClientOrderIdPrefixSpot.ToCharArray())
        .TrimStart(BinanceConstants.ClientOrderIdPrefixFutures.ToCharArray());

    /// <summary>
    /// Original order id
    /// </summary>
    [JsonProperty("origClientOrderId")]
    public string OriginalClientOrderId { get; set; } = "";

    /// <summary>
    /// The original order id as assigned by the client without the prefix
    /// </summary>
    public string RequestOriginalClientOrderId => ClientOrderId
        .TrimStart(BinanceConstants.ClientOrderIdPrefixSpot.ToCharArray())
        .TrimStart(BinanceConstants.ClientOrderIdPrefixFutures.ToCharArray());

    /// <summary>
    /// Transaction Time
    /// </summary>
    [JsonProperty("transactTime")]
    [JsonConverter(typeof(DateTimeConverter))]
    public DateTime? TransactionTime { get; set; }

    /// <summary>
    /// The price of the order
    /// </summary>
    public decimal Price { get; set; }

    /// <summary>
    /// The stop price of the order
    /// </summary>
    public decimal? StopPrice { get; set; }

    /// <summary>
    /// Calculated market order average price
    /// </summary>
    public decimal? MarketOrderPrice => (Price == 0 && Type == BinanceSpotOrderType.Market && QuantityFilled != 0)
        ? QuoteQuantityFilled / QuantityFilled
        : Price;

    /// <summary>
    /// The original quantity of the order, as specified in the order parameters by the user
    /// </summary>
    [JsonProperty("origQty")]
    public decimal Quantity { get; set; }

    /// <summary>
    /// The Iceberg Quantity
    /// </summary>
    [JsonProperty("icebergQty")]
    public decimal? IcebergQuantity { get; set; }
    
    /// <summary>
    /// The currently executed quantity of the order
    /// </summary>
    [JsonProperty("executedQty")]
    public decimal QuantityFilled { get; set; }

    /// <summary>
    /// The original quote order quantity of the order, as specified in the order parameters by the user
    /// </summary>
    [JsonProperty("origQuoteOrderQty")]
    public decimal QuoteQuantity { get; set; }

    /// <summary>
    /// The currently executed amount of quote asset. Amounts to Sum(quantity * price) of executed trades for this order
    /// </summary>
    [JsonProperty("cummulativeQuoteQty")]
    public decimal QuoteQuantityFilled { get; set; }

    /// <summary>
    /// The status of the order
    /// </summary>
    public BinanceOrderStatus Status { get; set; }

    /// <summary>
    /// How long the order is active
    /// </summary>
    public BinanceTimeInForce TimeInForce { get; set; }

    /// <summary>
    /// The type of the order
    /// </summary>
    public BinanceSpotOrderType Type { get; set; }

    /// <summary>
    /// The side of the order
    /// </summary>
    public BinanceOrderSide Side { get; set; }

    /// <summary>
    /// Is Working
    /// </summary>
    public DateTime? IsWorking { get; set; }

    /// <summary>
    /// When the order started working
    /// </summary>
    [JsonConverter(typeof(DateTimeConverter))]
    public DateTime? WorkingTime { get; set; }

    /// <summary>
    /// Time
    /// </summary>
    [JsonConverter(typeof(DateTimeConverter))]
    public DateTime? Time { get; set; }

    /// <summary>
    /// Update Time
    /// </summary>
    [JsonConverter(typeof(DateTimeConverter))]
    public DateTime? UpdateTime { get; set; }

    /// <summary>
    /// Self trade prevention mode
    /// </summary>
    public BinanceSelfTradePreventionMode SelfTradePreventionMode { get; set; }

    /// <summary>
    /// Trades for the order
    /// </summary>
    public IEnumerable<BinanceSpotOrderFill> Fills { get; set; } = [];

    /// <summary>
    /// Base Quantity which is still open to be filled
    /// </summary>
    public decimal QuantityRemaining => Quantity - QuantityFilled;

    /// <summary>
    /// Quote Quantity which is still open to be filled
    /// </summary>
    public decimal QuoteQuantityRemaining => QuoteQuantity - QuoteQuantityFilled;

    /// <summary>
    /// The average price the order was filled
    /// </summary>
    public decimal? AverageFillPrice => QuantityFilled != 0 ? QuoteQuantityFilled / QuantityFilled : null;
}